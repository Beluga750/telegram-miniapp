import asyncio
import os
from dotenv import load_dotenv

from telegram import Update, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

load_dotenv()  # Ñ‡Ð¸Ñ‚Ð°ÐµÑ‚ .env Ð»Ð¾ÐºÐ°Ð»ÑŒÐ½Ð¾

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")  # Ð½Ð°Ð¿Ñ€. https://miniapp-backend-***.onrender.com

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½ Ð² .env/ENV")

if not WEBAPP_URL:
    raise RuntimeError("WEBAPP_URL Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½ Ð² .env/ENV")

def build_keyboard():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("ÐžÑ‚ÐºÑ€Ñ‹Ñ‚ÑŒ Ð¼Ð¸Ð½Ð¸-Ð¿Ñ€Ð¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ", web_app=WebAppInfo(url=WEBAPP_URL))]]
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ÐŸÑ€Ð¸Ð²ÐµÑ‚! Ð–Ð¼Ð¸ ÐºÐ½Ð¾Ð¿ÐºÑƒ Ð½Ð¸Ð¶Ðµ ðŸ‘‡", reply_markup=build_keyboard())

async def refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ÐšÐ½Ð¾Ð¿ÐºÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð° âœ…", reply_markup=build_keyboard())

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("refresh", refresh))
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
